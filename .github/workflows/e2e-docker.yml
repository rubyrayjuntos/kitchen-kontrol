name: E2E Tests - Docker Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC

jobs:
  e2e-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start Docker Compose stack
        run: |
          docker-compose -f docker-compose.test.yml up -d
          echo "Waiting for services to be healthy..."
          sleep 10
      
      - name: Check service health
        run: |
          echo "Checking PostgreSQL..."
          docker-compose -f docker-compose.test.yml exec -T db pg_isready -U test_user || exit 1
          
          echo "Checking Backend API..."
          docker-compose -f docker-compose.test.yml exec -T backend curl -f http://localhost:3002/api/health || true
          
          echo "Services started successfully âœ“"
      
      - name: Setup Node.js for tests
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Cypress
        run: npm install --save-dev cypress
        continue-on-error: true
      
      - name: Run E2E tests (Cypress)
        run: npx cypress run --headless
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          API_URL: http://localhost:3002
        continue-on-error: true
      
      - name: Run API tests
        run: |
          echo "Testing Backend API endpoints..."
          # Test health check
          curl -v http://localhost:3002/api/health || true
          
          # Add more API tests here
        continue-on-error: true
      
      - name: Check container logs on failure
        if: failure()
        run: |
          echo "=== Backend Logs ==="
          docker-compose -f docker-compose.test.yml logs backend || true
          echo ""
          echo "=== Frontend Logs ==="
          docker-compose -f docker-compose.test.yml logs frontend || true
          echo ""
          echo "=== Database Logs ==="
          docker-compose -f docker-compose.test.yml logs db || true
      
      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: cypress/screenshots/
      
      - name: Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-videos
          path: cypress/videos/
      
      - name: Cleanup Docker stack
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  docker-build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile.server
          push: false
          tags: kitchen-kontrol-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          dockerfile: Dockerfile.client
          push: false
          tags: kitchen-kontrol-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build test report
        run: |
          echo "ðŸ“¦ Docker Build Test Report"
          echo "============================"
          echo "âœ“ Backend Docker image built successfully"
          echo "âœ“ Frontend Docker image built successfully"
          echo "âœ“ Build cache optimized with Buildx"

  integration-with-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Start Docker stack
        run: docker-compose -f docker-compose.test.yml up -d
      
      - name: Wait for backend readiness
        run: |
          for i in {1..30}; do
            if docker-compose -f docker-compose.test.yml exec -T backend curl -f http://localhost:3002/api/health > /dev/null 2>&1; then
              echo "Backend is ready!"
              exit 0
            fi
            echo "Attempt $i: Backend not ready yet, waiting..."
            sleep 2
          done
          echo "Backend failed to start"
          exit 1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run integration tests against Docker stack
        run: |
          npm test -- \
            --testPathPattern="integration" \
            --no-coverage \
            --watchAll=false \
            --passWithNoTests
        env:
          API_URL: http://localhost:3002
          DATABASE_URL: postgresql://test_user:test_password@localhost:5433/kitchen_kontrol_test
          NODE_ENV: test
      
      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v
